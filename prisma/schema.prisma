// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  ssoId              String               @id
  ssoName            String?
  isAdmin            Boolean              @default(false)
  LoanedItem         LoanedItems[]
  LoanedItemsHistory LoanedItemsHistory[]
  AuditLogs          AuditLogs[]
}

model Items {
  id                 String               @id @default(uuid())
  name               String
  isAvailable        Boolean              @default(true)
  currentLocation    String               @default("")
  description        String?
  category           Categories           @relation(fields: [categoryName], references: [name])
  categoryName       String
  markers            Json?
  manufacturedYear   Int?
  LoanedItem         LoanedItems[]
  LoanedItemsHistory LoanedItemsHistory[]
  FlagsOnItems       FlagsOnItems[]
}

model LoanedItems {
  loanId       String    @id @default(uuid())
  user         Users     @relation(fields: [userId], references: [ssoId])
  userId       String
  item         Items     @relation(fields: [itemId], references: [id])
  itemId       String
  loanedDate   DateTime  @default(now())
  location     Locations @relation(fields: [locationName], references: [name])
  locationName String

  @@unique([itemId])
}

model LoanedItemsHistory {
  loanId       String    @id @default(uuid())
  user         Users     @relation(fields: [userId], references: [ssoId])
  userId       String
  item         Items     @relation(fields: [itemId], references: [id])
  itemId       String
  loanedDate   DateTime
  returnedDate DateTime  @default(now())
  location     Locations @relation(fields: [locationName], references: [name])
  locationName String
}

model Locations {
  name               String               @id @unique
  LoanedItem         LoanedItems[]
  LoanedItemsHistory LoanedItemsHistory[]
}

model Categories {
  name  String  @id @unique
  Items Items[]
}

model FlagsOnItems {
  flagId   String @id @default(uuid())
  item     Items  @relation(fields: [itemId], references: [id])
  itemId   String
  flag     Flags  @relation(fields: [flagName], references: [name])
  flagName String
}

model Flags {
  name         String         @id @unique
  description  String
  FlagsOnItems FlagsOnItems[]
}

enum CRUD {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Table {
  Items
  LoanedItem
  LoanedItemsHistory
  Locations
  Categories
  FlagsOnItems
  Flags
}

model AuditLogs {
  LogId  String @id @default(uuid())
  User   Users  @relation(fields: [ssoId], references: [ssoId])
  ssoId  String
  Action CRUD
  Table  Table
  Info   Json
}
